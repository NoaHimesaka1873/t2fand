#!/usr/bin/env python
# SPDX-License-Identifier: GPL-3.0

import os, os.path
import configparser
import signal
import time
import math
from glob import glob
from pathlib import Path

# Path to PID file
PIDFILE = "/run/t2fand.pid"

# Path to config file
CONFIGFILE = "/etc/t2fand.conf"


# Class for fan attributes
class Fan:
    def __init__(self: object, path: str) -> None:
        self.path = path
        self.max_speed = int(Path(path + "_max").read_text())
        self.min_speed = int(Path(path + "_min").read_text())

    def get_speed(self: object) -> int:
        return int(Path(self.path + "_input").read_text())

    def set_speed(self: object, speed: int) -> None:
        if speed < self.min_speed:
            speed = self.min_speed
        elif speed > self.max_speed:
            speed = self.max_speed
        Path(self.path + "_output").write_text(str(speed))

    def enable_manual(self: object) -> None:
        Path(self.path + "_manual").write_text("1")

    def disable_manual(self: object) -> None:
        Path(self.path + "_manual").write_text("0")

    def calc_speed(self: object, templist: list, temp: float) -> int:
        if templist[3] == "true":
            return self.max_speed
        if temp <= templist[0]:
            return self.min_speed
        elif temp >= templist[1]:
            return self.max_speed
        match templist[2]:
            case "linear":
                return int(
                    (temp - templist[0])
                    / (templist[1] - templist[0])
                    * (self.max_speed - self.min_speed)
                    + self.min_speed
                )
            case "exponential":
                return int(
                    (temp - templist[0]) ** 3
                    / (templist[1] - templist[0]) ** 3
                    * (self.max_speed - self.min_speed)
                    + self.min_speed
                )
            case "logarithmic":
                return int(
                    math.log(temp - templist[0], templist[1] - templist[0])
                    * (self.max_speed - self.min_speed)
                    + self.min_speed
                )
            case _:
                return self.max_speed


# read CPU package temperature
def get_cpu_temp() -> float:
    paths = [
        Path(p)
        for p in glob("/sys/devices/platform/coretemp.0/hwmon/hwmon*/temp1_input")
    ]
    for path in paths:
        if path.read_text().strip() != "0":
            return int(path.read_text()) / 1000
    return -1


# read GPU temperature
def get_gpu_temp() -> float:
    paths = [
        Path(p) for p in glob("/sys/class/drm/card0/device/hwmon/hwmon*/temp1_input")
    ]
    for path in paths:
        if path.read_text().strip() != "0":
            return int(path.read_text()) / 1000
    return -1


# check if __main__ is the name of the current module and exit if not
if __name__ != "__main__":
    exit(1)

# exit if not running as root
if os.geteuid() != 0:
    print("T2 Fan Daemon must be run as root")
    exit(1)

# check whether fan exists
doesFanExist = False
paths = [Path(p) for p in glob("/sys/devices/*/*/*/*/APP0001:00/fan*")]
for path in paths:
    if path.exists():
        doesFanExist = True
        break

if not doesFanExist:
    print("Fan not found")
    exit(1)

# check for temperature sensors
isGpuTempAvailable = False
isCpuTempAvailable = False
cpupaths = [Path(p) for p in glob("/sys/devices/platform/coretemp.0/hwmon/hwmon*/temp1_input")]
for path in cpupaths:
    if path.exists():
        isCpuTempAvailable = True
        break
if not isCpuTempAvailable:
    print("CPU temperature sensor not found")
    exit(1)
elif get_cpu_temp() == -1:
    print("CPU temperature sensor not found")
    exit(1)
if (
    Path("/sys/class/drm/card0/device/hwmon/hwmon*/temp1_input").exists()
    and get_gpu_temp() != -1
):
    isGpuTempAvailable = True


# check if t2fand is already running
if os.path.isfile(PIDFILE):
    pid = int(Path(PIDFILE).read_text())
    if not os.path.exists("/proc/" + str(pid)):
        print(
            "T2 Fan Daemon is not running, but PID file exists, indicating a previous crash. Removing PID file..."
        )
        os.remove(PIDFILE)
    else:
        print("T2 Fan Daemon is already running")
        exit(1)

# set up fans
fanPath = paths[0].parent
fans = [Fan(fPath[:-6]) for fPath in glob(str(fanPath) + "/fan*_input")]
fanCount = len(fans)


# Gracefully exit on SIGTERM or SIGINT
def signal_handler(sig, frame):
    print("T2 Fan Daemon is shutting down...")
    for fan in fans:
        fan.disable_manual()
    os.remove(PIDFILE)
    exit()


signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

# write PID to file
Path(PIDFILE).write_text(str(os.getpid()))

# check if config file exists and generate it if not
if not os.path.isfile(CONFIGFILE):
    print("Config file not found, generating...")
    config = configparser.ConfigParser()
    for i in range(fanCount):
        config["Fan" + str(i + 1)] = {
            "low_temp": "55",
            "high_temp": "75",
            "speed_curve": "linear",
            "always_full_speed": "false",
        }
    with open(CONFIGFILE, "w") as configfile:
        config.write(configfile)

# read config file
config = configparser.ConfigParser()
try:
    config.read(CONFIGFILE)
except:
    print("Error reading config file")
    exit(1)

temps = []

# set up config variables
for i in range(fanCount):
    section_name = f"Fan{i+1}"
    if not config.has_section(section_name):
        print(f"{section_name} section not found in config file")
        exit(1)
    if not config.has_option(section_name, "low_temp"):
        print(f"low_temp not found in {section_name} section")
        exit(1)
    if not config.has_option(section_name, "high_temp"):
        print(f"high_temp not found in {section_name} section")
        exit(1)
    if not config.has_option(section_name, "speed_curve"):
        print(f"speed_curve not found in {section_name} section")
        exit(1)
    if not config.has_option(section_name, "always_full_speed"):
        print(f"always_full_speed not found in {section_name} section")
        exit(1)
    if config[section_name]["speed_curve"] not in [
        "linear",
        "exponential",
        "logarithmic",
    ]:
        print(f"speed_curve in {section_name} section is invalid")
        exit(1)
    temps.append(
        [
            float(config[section_name]["low_temp"]),
            float(config[section_name]["high_temp"]),
            config[section_name]["speed_curve"],
            config[section_name]["always_full_speed"],
        ]
    )

# enable manual fan control
for fan in fans:
    fan.enable_manual()

# main loop
while True:
    cpuTemp = get_cpu_temp()
    if isGpuTempAvailable:
        gpuTemp = get_gpu_temp()
        if gpuTemp > cpuTemp:
            temp = gpuTemp
        else:
            temp = cpuTemp
    else:
        temp = cpuTemp
    for i in range(fanCount):
        fans[i].set_speed(fans[i].calc_speed(temps[i], temp))
    time.sleep(1)

